// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String         @unique // This is going to be set to the clerk user id
  stripeId      String?        @unique
  email         String?        @unique
  subscriptions Subscription[]
  lifetimePro   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subscription {
  id                 String    @id
  userId             String
  user               User      @relation(fields: [userId], references: [id])
  status             String
  priceId            String?
  price              Price?    @relation(fields: [priceId], references: [id])
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  trialStart         DateTime?
  trialEnd           DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  endedAt            DateTime?
  created            DateTime
  metadata           Json
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Price {
  id              String  @id
  productId       String?
  product         Product? @relation(fields: [productId], references: [id])
  active          Boolean
  currency        String
  description     String?
  type            String
  unitAmount      Int?
  interval        String?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json
  subscriptions   Subscription[]
    createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id
  active      Boolean
  name        String
  description String?
  image       String?
  metadata    Json
  prices      Price[]
  defaultPriceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model Applicant {
  id           String        @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  jobTitle     String
  resume       String
  skills       String?
  experience   String?
  isMain       Boolean       @default(false)
  isInProfile  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]

  @@unique([id, userId])
  @@index([userId])
}

model Application {
  id          String   @id @default(cuid())
  userId     String

  title    String
  description String
  skillsSummary String
  companyName String?
  companyDetails String?
  
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  coverLetters CoverLetter[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([id, userId])
  @@index ([userId])

}



model CoverLetter {
  id            String      @id @default(cuid())
  userId        String
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  text          String
  label         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([applicationId])
}
